
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel1(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
  float bgemm_local[64];
  __shared__ float placeholder_shared[256];
  __shared__ float data_pack_shared[256];
  bgemm_local[(0)] = 0.000000e+00f;
  bgemm_local[(32)] = 0.000000e+00f;
  bgemm_local[(8)] = 0.000000e+00f;
  bgemm_local[(40)] = 0.000000e+00f;
  bgemm_local[(16)] = 0.000000e+00f;
  bgemm_local[(48)] = 0.000000e+00f;
  bgemm_local[(24)] = 0.000000e+00f;
  bgemm_local[(56)] = 0.000000e+00f;
  bgemm_local[(1)] = 0.000000e+00f;
  bgemm_local[(33)] = 0.000000e+00f;
  bgemm_local[(9)] = 0.000000e+00f;
  bgemm_local[(41)] = 0.000000e+00f;
  bgemm_local[(17)] = 0.000000e+00f;
  bgemm_local[(49)] = 0.000000e+00f;
  bgemm_local[(25)] = 0.000000e+00f;
  bgemm_local[(57)] = 0.000000e+00f;
  bgemm_local[(2)] = 0.000000e+00f;
  bgemm_local[(34)] = 0.000000e+00f;
  bgemm_local[(10)] = 0.000000e+00f;
  bgemm_local[(42)] = 0.000000e+00f;
  bgemm_local[(18)] = 0.000000e+00f;
  bgemm_local[(50)] = 0.000000e+00f;
  bgemm_local[(26)] = 0.000000e+00f;
  bgemm_local[(58)] = 0.000000e+00f;
  bgemm_local[(3)] = 0.000000e+00f;
  bgemm_local[(35)] = 0.000000e+00f;
  bgemm_local[(11)] = 0.000000e+00f;
  bgemm_local[(43)] = 0.000000e+00f;
  bgemm_local[(19)] = 0.000000e+00f;
  bgemm_local[(51)] = 0.000000e+00f;
  bgemm_local[(27)] = 0.000000e+00f;
  bgemm_local[(59)] = 0.000000e+00f;
  bgemm_local[(4)] = 0.000000e+00f;
  bgemm_local[(36)] = 0.000000e+00f;
  bgemm_local[(12)] = 0.000000e+00f;
  bgemm_local[(44)] = 0.000000e+00f;
  bgemm_local[(20)] = 0.000000e+00f;
  bgemm_local[(52)] = 0.000000e+00f;
  bgemm_local[(28)] = 0.000000e+00f;
  bgemm_local[(60)] = 0.000000e+00f;
  bgemm_local[(5)] = 0.000000e+00f;
  bgemm_local[(37)] = 0.000000e+00f;
  bgemm_local[(13)] = 0.000000e+00f;
  bgemm_local[(45)] = 0.000000e+00f;
  bgemm_local[(21)] = 0.000000e+00f;
  bgemm_local[(53)] = 0.000000e+00f;
  bgemm_local[(29)] = 0.000000e+00f;
  bgemm_local[(61)] = 0.000000e+00f;
  bgemm_local[(6)] = 0.000000e+00f;
  bgemm_local[(38)] = 0.000000e+00f;
  bgemm_local[(14)] = 0.000000e+00f;
  bgemm_local[(46)] = 0.000000e+00f;
  bgemm_local[(22)] = 0.000000e+00f;
  bgemm_local[(54)] = 0.000000e+00f;
  bgemm_local[(30)] = 0.000000e+00f;
  bgemm_local[(62)] = 0.000000e+00f;
  bgemm_local[(7)] = 0.000000e+00f;
  bgemm_local[(39)] = 0.000000e+00f;
  bgemm_local[(15)] = 0.000000e+00f;
  bgemm_local[(47)] = 0.000000e+00f;
  bgemm_local[(23)] = 0.000000e+00f;
  bgemm_local[(55)] = 0.000000e+00f;
  bgemm_local[(31)] = 0.000000e+00f;
  bgemm_local[(63)] = 0.000000e+00f;
  for (int ci_outer = 0; ci_outer < 16; ++ci_outer) {
    __syncthreads();
    placeholder_shared[(((((int)threadIdx.y) * 16) + ((int)threadIdx.x)))] = placeholder[(((((((int)blockIdx.z) * 4096) + (ci_outer * 256)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 64))] = placeholder[((((((((int)blockIdx.z) * 4096) + (ci_outer * 256)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 64))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 128))] = placeholder[((((((((int)blockIdx.z) * 4096) + (ci_outer * 256)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 128))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 192))] = placeholder[((((((((int)blockIdx.z) * 4096) + (ci_outer * 256)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 192))];
    data_pack_shared[(((((int)threadIdx.y) * 16) + ((int)threadIdx.x)))] = data_pack[((((((((int)blockIdx.z) * 200704) + (ci_outer * 12544)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)))];
    data_pack_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 64))] = data_pack[(((((((((int)blockIdx.z) * 200704) + (ci_outer * 12544)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 3136))];
    data_pack_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 128))] = data_pack[(((((((((int)blockIdx.z) * 200704) + (ci_outer * 12544)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 6272))];
    data_pack_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 192))] = data_pack[(((((((((int)blockIdx.z) * 200704) + (ci_outer * 12544)) + (((int)blockIdx.x) * 64)) + (((int)threadIdx.y) * 16)) + ((int)threadIdx.x)) + 9408))];
    __syncthreads();
    for (int ci_inner = 0; ci_inner < 4; ++ci_inner) {
      bgemm_local[(0)] = (bgemm_local[(0)] + (placeholder_shared[(((ci_inner * 64) + (((int)threadIdx.y) * 8)))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(32)] = (bgemm_local[(32)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 32))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(8)] = (bgemm_local[(8)] + (placeholder_shared[(((ci_inner * 64) + (((int)threadIdx.y) * 8)))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(40)] = (bgemm_local[(40)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 32))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(16)] = (bgemm_local[(16)] + (placeholder_shared[(((ci_inner * 64) + (((int)threadIdx.y) * 8)))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(48)] = (bgemm_local[(48)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 32))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(24)] = (bgemm_local[(24)] + (placeholder_shared[(((ci_inner * 64) + (((int)threadIdx.y) * 8)))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(56)] = (bgemm_local[(56)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 32))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(1)] = (bgemm_local[(1)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 1))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(33)] = (bgemm_local[(33)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 33))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(9)] = (bgemm_local[(9)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 1))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(41)] = (bgemm_local[(41)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 33))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(17)] = (bgemm_local[(17)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 1))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(49)] = (bgemm_local[(49)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 33))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(25)] = (bgemm_local[(25)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 1))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(57)] = (bgemm_local[(57)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 33))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(2)] = (bgemm_local[(2)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 2))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(34)] = (bgemm_local[(34)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 34))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(10)] = (bgemm_local[(10)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 2))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(42)] = (bgemm_local[(42)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 34))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(18)] = (bgemm_local[(18)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 2))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(50)] = (bgemm_local[(50)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 34))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(26)] = (bgemm_local[(26)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 2))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(58)] = (bgemm_local[(58)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 34))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(3)] = (bgemm_local[(3)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 3))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(35)] = (bgemm_local[(35)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 35))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(11)] = (bgemm_local[(11)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 3))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(43)] = (bgemm_local[(43)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 35))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(19)] = (bgemm_local[(19)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 3))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(51)] = (bgemm_local[(51)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 35))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(27)] = (bgemm_local[(27)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 3))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(59)] = (bgemm_local[(59)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 35))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(4)] = (bgemm_local[(4)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 4))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(36)] = (bgemm_local[(36)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 36))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(12)] = (bgemm_local[(12)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 4))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(44)] = (bgemm_local[(44)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 36))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(20)] = (bgemm_local[(20)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 4))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(52)] = (bgemm_local[(52)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 36))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(28)] = (bgemm_local[(28)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 4))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(60)] = (bgemm_local[(60)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 36))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(5)] = (bgemm_local[(5)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 5))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(37)] = (bgemm_local[(37)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 37))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(13)] = (bgemm_local[(13)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 5))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(45)] = (bgemm_local[(45)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 37))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(21)] = (bgemm_local[(21)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 5))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(53)] = (bgemm_local[(53)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 37))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(29)] = (bgemm_local[(29)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 5))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(61)] = (bgemm_local[(61)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 37))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(6)] = (bgemm_local[(6)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 6))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(38)] = (bgemm_local[(38)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 38))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(14)] = (bgemm_local[(14)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 6))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(46)] = (bgemm_local[(46)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 38))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(22)] = (bgemm_local[(22)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 6))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(54)] = (bgemm_local[(54)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 38))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(30)] = (bgemm_local[(30)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 6))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(62)] = (bgemm_local[(62)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 38))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(7)] = (bgemm_local[(7)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 7))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(39)] = (bgemm_local[(39)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 39))] * data_pack_shared[(((ci_inner * 64) + ((int)threadIdx.x)))]));
      bgemm_local[(15)] = (bgemm_local[(15)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 7))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(47)] = (bgemm_local[(47)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 39))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 16))]));
      bgemm_local[(23)] = (bgemm_local[(23)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 7))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(55)] = (bgemm_local[(55)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 39))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 32))]));
      bgemm_local[(31)] = (bgemm_local[(31)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 7))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
      bgemm_local[(63)] = (bgemm_local[(63)] + (placeholder_shared[((((ci_inner * 64) + (((int)threadIdx.y) * 8)) + 39))] * data_pack_shared[((((ci_inner * 64) + ((int)threadIdx.x)) + 48))]));
    }
  }
  bgemm[(((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)))] = bgemm_local[(0)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 100352))] = bgemm_local[(32)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 16))] = bgemm_local[(8)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 100368))] = bgemm_local[(40)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 32))] = bgemm_local[(16)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 100384))] = bgemm_local[(48)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 48))] = bgemm_local[(24)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 100400))] = bgemm_local[(56)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 3136))] = bgemm_local[(1)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 103488))] = bgemm_local[(33)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 3152))] = bgemm_local[(9)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 103504))] = bgemm_local[(41)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 3168))] = bgemm_local[(17)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 103520))] = bgemm_local[(49)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 3184))] = bgemm_local[(25)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 103536))] = bgemm_local[(57)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 6272))] = bgemm_local[(2)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 106624))] = bgemm_local[(34)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 6288))] = bgemm_local[(10)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 106640))] = bgemm_local[(42)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 6304))] = bgemm_local[(18)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 106656))] = bgemm_local[(50)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 6320))] = bgemm_local[(26)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 106672))] = bgemm_local[(58)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 9408))] = bgemm_local[(3)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 109760))] = bgemm_local[(35)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 9424))] = bgemm_local[(11)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 109776))] = bgemm_local[(43)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 9440))] = bgemm_local[(19)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 109792))] = bgemm_local[(51)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 9456))] = bgemm_local[(27)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 109808))] = bgemm_local[(59)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 12544))] = bgemm_local[(4)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 112896))] = bgemm_local[(36)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 12560))] = bgemm_local[(12)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 112912))] = bgemm_local[(44)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 12576))] = bgemm_local[(20)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 112928))] = bgemm_local[(52)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 12592))] = bgemm_local[(28)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 112944))] = bgemm_local[(60)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 15680))] = bgemm_local[(5)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 116032))] = bgemm_local[(37)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 15696))] = bgemm_local[(13)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 116048))] = bgemm_local[(45)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 15712))] = bgemm_local[(21)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 116064))] = bgemm_local[(53)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 15728))] = bgemm_local[(29)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 116080))] = bgemm_local[(61)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 18816))] = bgemm_local[(6)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 119168))] = bgemm_local[(38)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 18832))] = bgemm_local[(14)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 119184))] = bgemm_local[(46)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 18848))] = bgemm_local[(22)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 119200))] = bgemm_local[(54)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 18864))] = bgemm_local[(30)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 119216))] = bgemm_local[(62)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 21952))] = bgemm_local[(7)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 122304))] = bgemm_local[(39)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 21968))] = bgemm_local[(15)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 122320))] = bgemm_local[(47)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 21984))] = bgemm_local[(23)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 122336))] = bgemm_local[(55)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 22000))] = bgemm_local[(31)];
  bgemm[((((((((int)blockIdx.z) * 200704) + (((int)threadIdx.y) * 25088)) + (((int)blockIdx.x) * 64)) + ((int)threadIdx.x)) + 122352))] = bgemm_local[(63)];
}

extern "C" __global__ void fused_reshape_transpose_reshape_kernel0(float* __restrict__ placeholder, float* __restrict__ T_reshape) {
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) < 451584) {
      T_reshape[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)))] = placeholder[((((((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 2016) / 672) * 150528) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 3) * 50176)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) / 2016) * 224)) + (((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 262144) + (((int)blockIdx.x) * 1024)) + ((int)threadIdx.x)) % 672) / 3)))];
    }
  }
}

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel0(float* __restrict__ placeholder, float* __restrict__ data_pack) {
  float d[36];
  float data_pack_local[36];
  for (int eps = 0; eps < 6; ++eps) {
    for (int nu = 0; nu < 6; ++nu) {
      d[(((eps * 6) + nu))] = (((((1 <= ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 3136) / 56) * 4) + eps)) && (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 3136) / 56) * 4) + eps) < 225)) && (1 <= (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 56) * 4) + nu))) && ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 56) * 4) + nu) < 225)) ? placeholder[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 56) * 896) + (eps * 224)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 56) * 4)) + nu) - 225))] : 0.000000e+00f);
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(1)] * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(2)] * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(3)] * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(4)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(6)] * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(7)] * -1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(8)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(9)] * -1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(10)] * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(12)] * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(13)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(14)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(15)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(16)] * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(18)] * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(19)] * 1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(20)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + ((d[(21)] * 1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(22)] * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(24)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(25)] * -1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(26)] * -2.000000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + (d[(27)] * 1.500000e+00f));
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(28)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(2)] * -2.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(3)] * 5.000000e-01f));
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(4)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(7)] * -1.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(8)] * -1.500000e+00f) * -2.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(9)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(10)] * -1.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(13)] * -2.000000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(14)] * -2.000000e+00f) * -2.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(15)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(16)] * -2.000000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(19)] * 1.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(20)] * 1.500000e+00f) * -2.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + ((d[(21)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(22)] * 1.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(25)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(26)] * -2.500000e+00f));
  data_pack_local[(1)] = (data_pack_local[(1)] + (d[(27)] * 5.000000e-01f));
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(28)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(1)] * -1.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(2)] * 5.000000e-01f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(3)] * 2.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(4)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(7)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(8)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(9)] * -1.500000e+00f) * 2.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(10)] * -1.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(13)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(14)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(15)] * -2.000000e+00f) * 2.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(16)] * -2.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(19)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(20)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(2)] = (data_pack_local[(2)] + ((d[(21)] * 1.500000e+00f) * 2.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(22)] * 1.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(25)] * -1.000000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(26)] * 5.000000e-01f));
  data_pack_local[(2)] = (data_pack_local[(2)] + (d[(27)] * 2.500000e+00f));
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(28)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(1)] * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(2)] * -1.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(3)] * 2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(4)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(7)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(8)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(9)] * -1.500000e+00f) * 2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(10)] * -1.500000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(13)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(14)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(15)] * -2.000000e+00f) * 2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(16)] * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(19)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(20)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + ((d[(21)] * 1.500000e+00f) * 2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(22)] * 1.500000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(25)] * -2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + (d[(27)] * 2.000000e+00f));
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(28)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(1)] * 5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(2)] * -1.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(3)] * -5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(7)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(8)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(9)] * -1.500000e+00f) * -5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(10)] * -1.500000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(13)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(14)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(15)] * -2.000000e+00f) * -5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(16)] * -2.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(19)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(20)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + ((d[(21)] * 1.500000e+00f) * -5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(22)] * 1.500000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(25)] * 5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(4)] = (data_pack_local[(4)] + (d[(27)] * -5.000000e-01f));
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(28)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(1)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(2)] * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(3)] * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(4)] * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(7)] * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(8)] * -1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(9)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(10)] * -1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(11)] * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(13)] * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(14)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(15)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(16)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(17)] * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(19)] * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(20)] * 1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(21)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + ((d[(22)] * 1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(23)] * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(25)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(26)] * -1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(27)] * -2.000000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(29)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(7)] * -1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(8)] * -2.000000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(9)] * 1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(12)] * -2.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(13)] * -2.500000e+00f) * -1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(14)] * -2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(15)] * -2.500000e+00f) * 1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(16)] * -2.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(18)] * 5.000000e-01f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(19)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(20)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + ((d[(21)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(22)] * 5.000000e-01f));
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(24)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(25)] * -1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(26)] * -2.000000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + (d[(27)] * 1.500000e+00f));
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(28)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(8)] * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(9)] * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(10)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(13)] * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + ((d[(14)] * -2.500000e+00f) * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + ((d[(15)] * -2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(16)] * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(19)] * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + ((d[(20)] * 5.000000e-01f) * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + ((d[(21)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(22)] * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(25)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(26)] * -2.500000e+00f));
  data_pack_local[(7)] = (data_pack_local[(7)] + (d[(27)] * 5.000000e-01f));
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(28)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(7)] * -1.000000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(8)] * 5.000000e-01f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(9)] * 2.500000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(10)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(13)] * -2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(14)] * -2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(15)] * -2.500000e+00f) * 2.500000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(16)] * -2.500000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(19)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(20)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(8)] = (data_pack_local[(8)] + ((d[(21)] * 5.000000e-01f) * 2.500000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(22)] * 5.000000e-01f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(25)] * -1.000000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(26)] * 5.000000e-01f));
  data_pack_local[(8)] = (data_pack_local[(8)] + (d[(27)] * 2.500000e+00f));
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(28)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(7)] * -2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(8)] * -1.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(9)] * 2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(13)] * -2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(14)] * -2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(15)] * -2.500000e+00f) * 2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(16)] * -2.500000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(19)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(20)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + ((d[(21)] * 5.000000e-01f) * 2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(22)] * 5.000000e-01f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(25)] * -2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + (d[(27)] * 2.000000e+00f));
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(28)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(7)] * 5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(8)] * -1.000000e+00f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(9)] * -5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(13)] * -2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(14)] * -2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(15)] * -2.500000e+00f) * -5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(16)] * -2.500000e+00f));
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(19)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(20)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(10)] = (data_pack_local[(10)] + ((d[(21)] * 5.000000e-01f) * -5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(22)] * 5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(25)] * 5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(10)] = (data_pack_local[(10)] + (d[(27)] * -5.000000e-01f));
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(28)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(8)] * -1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(9)] * -2.000000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(10)] * 1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(13)] * -2.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(14)] * -2.500000e+00f) * -1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(15)] * -2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(16)] * -2.500000e+00f) * 1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(17)] * -2.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(19)] * 5.000000e-01f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(20)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(21)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + ((d[(22)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(23)] * 5.000000e-01f));
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(25)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(26)] * -1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(27)] * -2.000000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(29)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(6)] * -1.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(7)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(8)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(9)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(10)] * -1.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(12)] * 5.000000e-01f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(13)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(14)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(15)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(16)] * 5.000000e-01f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(18)] * 2.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(19)] * 2.500000e+00f) * -1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(20)] * 2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + ((d[(21)] * 2.500000e+00f) * 1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(22)] * 2.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(24)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(25)] * -1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(26)] * -2.000000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + (d[(27)] * 1.500000e+00f));
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(28)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(7)] * -1.000000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(8)] * -1.000000e+00f) * -2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(9)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(10)] * -1.000000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(13)] * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(14)] * 5.000000e-01f) * -2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(15)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(16)] * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(19)] * 2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(20)] * 2.500000e+00f) * -2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + ((d[(21)] * 2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(22)] * 2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(25)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(26)] * -2.500000e+00f));
  data_pack_local[(13)] = (data_pack_local[(13)] + (d[(27)] * 5.000000e-01f));
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(28)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(7)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(8)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(9)] * -1.000000e+00f) * 2.500000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(10)] * -1.000000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(13)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(14)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(15)] * 5.000000e-01f) * 2.500000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(16)] * 5.000000e-01f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(19)] * 2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(20)] * 2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(14)] = (data_pack_local[(14)] + ((d[(21)] * 2.500000e+00f) * 2.500000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(22)] * 2.500000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(25)] * -1.000000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(26)] * 5.000000e-01f));
  data_pack_local[(14)] = (data_pack_local[(14)] + (d[(27)] * 2.500000e+00f));
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(28)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(7)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(8)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(9)] * -1.000000e+00f) * 2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(10)] * -1.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(13)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(14)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(15)] * 5.000000e-01f) * 2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(16)] * 5.000000e-01f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(19)] * 2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(20)] * 2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + ((d[(21)] * 2.500000e+00f) * 2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(22)] * 2.500000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(25)] * -2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + (d[(27)] * 2.000000e+00f));
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(28)]);
  data_pack_local[(16)] = 0.000000e+00f;
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(7)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(8)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(9)] * -1.000000e+00f) * -5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(10)] * -1.000000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(13)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(14)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(15)] * 5.000000e-01f) * -5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(16)] * 5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(19)] * 2.500000e+00f) * 5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(20)] * 2.500000e+00f) * -1.000000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + ((d[(21)] * 2.500000e+00f) * -5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(22)] * 2.500000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(25)] * 5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(16)] = (data_pack_local[(16)] + (d[(27)] * -5.000000e-01f));
  data_pack_local[(16)] = (data_pack_local[(16)] + d[(28)]);
  data_pack_local[(17)] = 0.000000e+00f;
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(7)] * -1.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(8)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(9)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(10)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(11)] * -1.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(13)] * 5.000000e-01f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(14)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(15)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(16)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(17)] * 5.000000e-01f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(19)] * 2.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(20)] * 2.500000e+00f) * -1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(21)] * 2.500000e+00f) * -2.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + ((d[(22)] * 2.500000e+00f) * 1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(23)] * 2.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + d[(25)]);
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(26)] * -1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(27)] * -2.000000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(17)] = (data_pack_local[(17)] + d[(29)]);
  data_pack_local[(18)] = 0.000000e+00f;
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(6)] * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(7)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(8)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(9)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(10)] * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(12)] * -1.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(13)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(14)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(15)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(18)] * 2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(19)] * 2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(20)] * 2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + ((d[(21)] * 2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(22)] * 2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + d[(24)]);
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(25)] * -1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(26)] * -2.000000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + (d[(27)] * 1.500000e+00f));
  data_pack_local[(18)] = (data_pack_local[(18)] + d[(28)]);
  data_pack_local[(19)] = 0.000000e+00f;
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(7)] * -2.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(8)] * -2.000000e+00f) * -2.500000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(9)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(10)] * -2.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(13)] * -1.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(14)] * -1.000000e+00f) * -2.500000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(15)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(19)] * 2.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(20)] * 2.000000e+00f) * -2.500000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + ((d[(21)] * 2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(22)] * 2.000000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + d[(25)]);
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(26)] * -2.500000e+00f));
  data_pack_local[(19)] = (data_pack_local[(19)] + (d[(27)] * 5.000000e-01f));
  data_pack_local[(19)] = (data_pack_local[(19)] + d[(28)]);
  data_pack_local[(20)] = 0.000000e+00f;
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(7)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(8)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(9)] * -2.000000e+00f) * 2.500000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(10)] * -2.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(13)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(14)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(15)] * -1.000000e+00f) * 2.500000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(19)] * 2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(20)] * 2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(20)] = (data_pack_local[(20)] + ((d[(21)] * 2.000000e+00f) * 2.500000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(22)] * 2.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(25)] * -1.000000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(26)] * 5.000000e-01f));
  data_pack_local[(20)] = (data_pack_local[(20)] + (d[(27)] * 2.500000e+00f));
  data_pack_local[(20)] = (data_pack_local[(20)] + d[(28)]);
  data_pack_local[(21)] = 0.000000e+00f;
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(7)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(8)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(9)] * -2.000000e+00f) * 2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(10)] * -2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(13)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(14)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(15)] * -1.000000e+00f) * 2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(19)] * 2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(20)] * 2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + ((d[(21)] * 2.000000e+00f) * 2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(22)] * 2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(25)] * -2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + (d[(27)] * 2.000000e+00f));
  data_pack_local[(21)] = (data_pack_local[(21)] + d[(28)]);
  data_pack_local[(22)] = 0.000000e+00f;
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(7)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(8)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(9)] * -2.000000e+00f) * -5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(10)] * -2.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(13)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(14)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(15)] * -1.000000e+00f) * -5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(19)] * 2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(20)] * 2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + ((d[(21)] * 2.000000e+00f) * -5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(22)] * 2.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(25)] * 5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(22)] = (data_pack_local[(22)] + (d[(27)] * -5.000000e-01f));
  data_pack_local[(22)] = (data_pack_local[(22)] + d[(28)]);
  data_pack_local[(23)] = 0.000000e+00f;
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(7)] * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(8)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(9)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(10)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(11)] * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(13)] * -1.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(14)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(15)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(16)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(17)] * -1.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(19)] * 2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(20)] * 2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(21)] * 2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + ((d[(22)] * 2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(23)] * 2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + d[(25)]);
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(26)] * -1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(27)] * -2.000000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(23)] = (data_pack_local[(23)] + d[(29)]);
  data_pack_local[(24)] = 0.000000e+00f;
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(6)] * 5.000000e-01f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(7)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(8)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(9)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(10)] * 5.000000e-01f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(12)] * -1.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(13)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(14)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(15)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(18)] * -5.000000e-01f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(19)] * -5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(20)] * -5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + ((d[(21)] * -5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(22)] * -5.000000e-01f));
  data_pack_local[(24)] = (data_pack_local[(24)] + d[(24)]);
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(25)] * -1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(26)] * -2.000000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + (d[(27)] * 1.500000e+00f));
  data_pack_local[(24)] = (data_pack_local[(24)] + d[(28)]);
  data_pack_local[(25)] = 0.000000e+00f;
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(7)] * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(8)] * 5.000000e-01f) * -2.500000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(9)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(10)] * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(13)] * -1.000000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(14)] * -1.000000e+00f) * -2.500000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(15)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(19)] * -5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(20)] * -5.000000e-01f) * -2.500000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + ((d[(21)] * -5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(22)] * -5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + d[(25)]);
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(26)] * -2.500000e+00f));
  data_pack_local[(25)] = (data_pack_local[(25)] + (d[(27)] * 5.000000e-01f));
  data_pack_local[(25)] = (data_pack_local[(25)] + d[(28)]);
  data_pack_local[(26)] = 0.000000e+00f;
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(7)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(8)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(9)] * 5.000000e-01f) * 2.500000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(10)] * 5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(13)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(14)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(15)] * -1.000000e+00f) * 2.500000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(19)] * -5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(20)] * -5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + ((d[(21)] * -5.000000e-01f) * 2.500000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(22)] * -5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(25)] * -1.000000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(26)] * 5.000000e-01f));
  data_pack_local[(26)] = (data_pack_local[(26)] + (d[(27)] * 2.500000e+00f));
  data_pack_local[(26)] = (data_pack_local[(26)] + d[(28)]);
  data_pack_local[(27)] = 0.000000e+00f;
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(7)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(8)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(9)] * 5.000000e-01f) * 2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(10)] * 5.000000e-01f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(13)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(14)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(15)] * -1.000000e+00f) * 2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(19)] * -5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(20)] * -5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + ((d[(21)] * -5.000000e-01f) * 2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(22)] * -5.000000e-01f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(25)] * -2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + (d[(27)] * 2.000000e+00f));
  data_pack_local[(27)] = (data_pack_local[(27)] + d[(28)]);
  data_pack_local[(28)] = 0.000000e+00f;
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(7)] * 5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(8)] * 5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(9)] * 5.000000e-01f) * -5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(10)] * 5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(13)] * -1.000000e+00f) * 5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(14)] * -1.000000e+00f) * -1.000000e+00f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(15)] * -1.000000e+00f) * -5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(16)] * -1.000000e+00f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(19)] * -5.000000e-01f) * 5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(20)] * -5.000000e-01f) * -1.000000e+00f));
  data_pack_local[(28)] = (data_pack_local[(28)] + ((d[(21)] * -5.000000e-01f) * -5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(22)] * -5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(25)] * 5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(26)] * -1.000000e+00f));
  data_pack_local[(28)] = (data_pack_local[(28)] + (d[(27)] * -5.000000e-01f));
  data_pack_local[(28)] = (data_pack_local[(28)] + d[(28)]);
  data_pack_local[(29)] = 0.000000e+00f;
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(7)] * 5.000000e-01f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(8)] * 5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(9)] * 5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(10)] * 5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(11)] * 5.000000e-01f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(13)] * -1.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(14)] * -1.000000e+00f) * -1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(15)] * -1.000000e+00f) * -2.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(16)] * -1.000000e+00f) * 1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(17)] * -1.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(19)] * -5.000000e-01f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(20)] * -5.000000e-01f) * -1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(21)] * -5.000000e-01f) * -2.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + ((d[(22)] * -5.000000e-01f) * 1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(23)] * -5.000000e-01f));
  data_pack_local[(29)] = (data_pack_local[(29)] + d[(25)]);
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(26)] * -1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(27)] * -2.000000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(29)] = (data_pack_local[(29)] + d[(29)]);
  data_pack_local[(30)] = 0.000000e+00f;
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(6)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(7)] * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(8)] * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(9)] * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(10)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(12)] * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(13)] * -1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(14)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(15)] * -1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(16)] * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(18)] * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(19)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(20)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(21)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(22)] * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(24)] * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(25)] * 1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(26)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + ((d[(27)] * 1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(30)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(31)] * -1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(32)] * -2.000000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + (d[(33)] * 1.500000e+00f));
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(34)]);
  data_pack_local[(31)] = 0.000000e+00f;
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(7)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(8)] * -2.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(9)] * 5.000000e-01f));
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(10)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(13)] * -1.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(14)] * -1.500000e+00f) * -2.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(15)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(16)] * -1.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(19)] * -2.000000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(20)] * -2.000000e+00f) * -2.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(21)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(22)] * -2.000000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(25)] * 1.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(26)] * 1.500000e+00f) * -2.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + ((d[(27)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(31)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(32)] * -2.500000e+00f));
  data_pack_local[(31)] = (data_pack_local[(31)] + (d[(33)] * 5.000000e-01f));
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(34)]);
  data_pack_local[(32)] = 0.000000e+00f;
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(7)] * -1.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(8)] * 5.000000e-01f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(9)] * 2.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + d[(10)]);
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(13)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(14)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(15)] * -1.500000e+00f) * 2.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(16)] * -1.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(19)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(20)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(21)] * -2.000000e+00f) * 2.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(22)] * -2.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(25)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(26)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(32)] = (data_pack_local[(32)] + ((d[(27)] * 1.500000e+00f) * 2.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(31)] * -1.000000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(32)] * 5.000000e-01f));
  data_pack_local[(32)] = (data_pack_local[(32)] + (d[(33)] * 2.500000e+00f));
  data_pack_local[(32)] = (data_pack_local[(32)] + d[(34)]);
  data_pack_local[(33)] = 0.000000e+00f;
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(7)] * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(8)] * -1.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(9)] * 2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + d[(10)]);
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(13)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(14)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(15)] * -1.500000e+00f) * 2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(16)] * -1.500000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(19)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(20)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(21)] * -2.000000e+00f) * 2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(22)] * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(25)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(26)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + ((d[(27)] * 1.500000e+00f) * 2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(31)] * -2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(32)] * -1.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + (d[(33)] * 2.000000e+00f));
  data_pack_local[(33)] = (data_pack_local[(33)] + d[(34)]);
  data_pack_local[(34)] = 0.000000e+00f;
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(7)] * 5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(8)] * -1.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(9)] * -5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + d[(10)]);
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(13)] * -1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(14)] * -1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(15)] * -1.500000e+00f) * -5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(16)] * -1.500000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(19)] * -2.000000e+00f) * 5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(20)] * -2.000000e+00f) * -1.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(21)] * -2.000000e+00f) * -5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(22)] * -2.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(25)] * 1.500000e+00f) * 5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(26)] * 1.500000e+00f) * -1.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + ((d[(27)] * 1.500000e+00f) * -5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(28)] * 1.500000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(31)] * 5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(32)] * -1.000000e+00f));
  data_pack_local[(34)] = (data_pack_local[(34)] + (d[(33)] * -5.000000e-01f));
  data_pack_local[(34)] = (data_pack_local[(34)] + d[(34)]);
  data_pack_local[(35)] = 0.000000e+00f;
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(7)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(8)] * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(9)] * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(10)] * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(11)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(13)] * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(14)] * -1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(15)] * -1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(16)] * -1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(17)] * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(19)] * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(20)] * -2.000000e+00f) * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(21)] * -2.000000e+00f) * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(22)] * -2.000000e+00f) * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(23)] * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(25)] * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(26)] * 1.500000e+00f) * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(27)] * 1.500000e+00f) * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + ((d[(28)] * 1.500000e+00f) * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(29)] * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(31)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(32)] * -1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(33)] * -2.000000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + (d[(34)] * 1.500000e+00f));
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(35)]);
  for (int eps1 = 0; eps1 < 6; ++eps1) {
    for (int nu1 = 0; nu1 < 6; ++nu1) {
      data_pack[(((((eps1 * 1204224) + (nu1 * 200704)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 6) + nu1))];
    }
  }
}

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel2(float* __restrict__ placeholder, float* __restrict__ bgemm, float* __restrict__ T_relu) {
  float inverse[16];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 200704))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 401408))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 602112))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 802816))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1204224))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2408448))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3612672))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4816896))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 200704))] * -1.000000e+00f));
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 401408))]);
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 602112))] * 5.000000e-01f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 802816))] * -2.000000e+00f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 5.000000e-01f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -2.000000e+00f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 5.000000e-01f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -2.000000e+00f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * -1.000000e+00f));
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))]);
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 5.000000e-01f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * -2.000000e+00f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -1.000000e+00f));
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))]);
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 5.000000e-01f));
  inverse[(1)] = (inverse[(1)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -2.000000e+00f));
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 200704))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 401408))]);
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 602112))] * 2.500000e-01f));
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 802816))] * 4.000000e+00f));
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 2.500000e-01f));
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * 4.000000e+00f));
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 2.500000e-01f));
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * 4.000000e+00f));
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))]);
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 2.500000e-01f));
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 4.000000e+00f));
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))]);
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 2.500000e-01f));
  inverse[(2)] = (inverse[(2)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * 4.000000e+00f));
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 200704))] * -1.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 401408))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 602112))] * 1.250000e-01f));
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 802816))] * -8.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1003520))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 1.250000e-01f));
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -8.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2207744))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 1.250000e-01f));
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -8.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3411968))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * -1.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 1.250000e-01f));
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * -8.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4616192))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -1.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))]);
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 1.250000e-01f));
  inverse[(3)] = (inverse[(3)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -8.000000e+00f));
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5820416))]);
  inverse[(4)] = 0.000000e+00f;
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1204224))] * -1.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f));
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2408448))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))]);
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3612672))] * 5.000000e-01f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 5.000000e-01f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 5.000000e-01f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 5.000000e-01f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 5.000000e-01f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4816896))] * -2.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -2.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -2.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -2.000000e+00f));
  inverse[(4)] = (inverse[(4)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -2.000000e+00f));
  inverse[(5)] = 0.000000e+00f;
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f) * -1.000000e+00f));
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 5.000000e-01f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * -2.000000e+00f));
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(5)] = (inverse[(5)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 5.000000e-01f));
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -2.000000e+00f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 5.000000e-01f) * -1.000000e+00f));
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 5.000000e-01f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 5.000000e-01f) * 5.000000e-01f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 5.000000e-01f) * -2.000000e+00f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -2.000000e+00f) * -1.000000e+00f));
  inverse[(5)] = (inverse[(5)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -2.000000e+00f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -2.000000e+00f) * 5.000000e-01f));
  inverse[(5)] = (inverse[(5)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -2.000000e+00f) * -2.000000e+00f));
  inverse[(6)] = 0.000000e+00f;
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 2.500000e-01f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * 4.000000e+00f));
  inverse[(6)] = (inverse[(6)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(6)] = (inverse[(6)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 2.500000e-01f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * 4.000000e+00f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 5.000000e-01f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 5.000000e-01f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 5.000000e-01f) * 2.500000e-01f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 5.000000e-01f) * 4.000000e+00f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -2.000000e+00f));
  inverse[(6)] = (inverse[(6)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -2.000000e+00f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -2.000000e+00f) * 2.500000e-01f));
  inverse[(6)] = (inverse[(6)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -2.000000e+00f) * 4.000000e+00f));
  inverse[(7)] = 0.000000e+00f;
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f) * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 1.250000e-01f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * -8.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2207744))] * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 1.250000e-01f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -8.000000e+00f));
  inverse[(7)] = (inverse[(7)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3411968))]);
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 5.000000e-01f) * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 5.000000e-01f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 5.000000e-01f) * 1.250000e-01f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 5.000000e-01f) * -8.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4616192))] * 5.000000e-01f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -2.000000e+00f) * -1.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -2.000000e+00f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -2.000000e+00f) * 1.250000e-01f));
  inverse[(7)] = (inverse[(7)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -2.000000e+00f) * -8.000000e+00f));
  inverse[(7)] = (inverse[(7)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5820416))] * -2.000000e+00f));
  inverse[(8)] = 0.000000e+00f;
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1204224))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2408448))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))]);
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3612672))] * 2.500000e-01f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 2.500000e-01f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 2.500000e-01f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 2.500000e-01f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 2.500000e-01f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4816896))] * 4.000000e+00f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * 4.000000e+00f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * 4.000000e+00f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 4.000000e+00f));
  inverse[(8)] = (inverse[(8)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * 4.000000e+00f));
  inverse[(9)] = 0.000000e+00f;
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(9)] = (inverse[(9)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 5.000000e-01f));
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -2.000000e+00f));
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(9)] = (inverse[(9)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 5.000000e-01f));
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -2.000000e+00f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 2.500000e-01f) * -1.000000e+00f));
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 2.500000e-01f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 2.500000e-01f) * 5.000000e-01f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 2.500000e-01f) * -2.000000e+00f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * 4.000000e+00f) * -1.000000e+00f));
  inverse[(9)] = (inverse[(9)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * 4.000000e+00f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 4.000000e+00f) * 5.000000e-01f));
  inverse[(9)] = (inverse[(9)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * 4.000000e+00f) * -2.000000e+00f));
  inverse[(10)] = 0.000000e+00f;
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))]);
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * 4.000000e+00f));
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * 4.000000e+00f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 2.500000e-01f) * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 2.500000e-01f) * 4.000000e+00f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * 4.000000e+00f));
  inverse[(10)] = (inverse[(10)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * 4.000000e+00f));
  inverse[(10)] = (inverse[(10)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 4.000000e+00f) * 2.500000e-01f));
  inverse[(10)] = (inverse[(10)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * 4.000000e+00f) * 4.000000e+00f));
  inverse[(11)] = 0.000000e+00f;
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))]);
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * 1.250000e-01f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -8.000000e+00f));
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2207744))]);
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 1.250000e-01f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -8.000000e+00f));
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3411968))]);
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 2.500000e-01f) * -1.000000e+00f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 2.500000e-01f));
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 2.500000e-01f) * 1.250000e-01f));
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 2.500000e-01f) * -8.000000e+00f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4616192))] * 2.500000e-01f));
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * 4.000000e+00f) * -1.000000e+00f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * 4.000000e+00f));
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * 4.000000e+00f) * 1.250000e-01f));
  inverse[(11)] = (inverse[(11)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * 4.000000e+00f) * -8.000000e+00f));
  inverse[(11)] = (inverse[(11)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5820416))] * 4.000000e+00f));
  inverse[(12)] = 0.000000e+00f;
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1204224))] * -1.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f));
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2408448))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))]);
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3612672))] * 1.250000e-01f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 1.250000e-01f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 1.250000e-01f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 1.250000e-01f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 1.250000e-01f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4816896))] * -8.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -8.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -8.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -8.000000e+00f));
  inverse[(12)] = (inverse[(12)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -8.000000e+00f));
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6021120))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6221824))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6422528))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6623232))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6823936))]);
  inverse[(13)] = 0.000000e+00f;
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f) * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 5.000000e-01f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * -2.000000e+00f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 5.000000e-01f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -2.000000e+00f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 1.250000e-01f) * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 1.250000e-01f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 1.250000e-01f) * 5.000000e-01f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 1.250000e-01f) * -2.000000e+00f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -8.000000e+00f) * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -8.000000e+00f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -8.000000e+00f) * 5.000000e-01f));
  inverse[(13)] = (inverse[(13)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -8.000000e+00f) * -2.000000e+00f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6221824))] * -1.000000e+00f));
  inverse[(13)] = (inverse[(13)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6422528))]);
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6623232))] * 5.000000e-01f));
  inverse[(13)] = (inverse[(13)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6823936))] * -2.000000e+00f));
  inverse[(14)] = 0.000000e+00f;
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 2.500000e-01f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * 4.000000e+00f));
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 2.500000e-01f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * 4.000000e+00f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 1.250000e-01f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 1.250000e-01f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 1.250000e-01f) * 2.500000e-01f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 1.250000e-01f) * 4.000000e+00f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -8.000000e+00f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -8.000000e+00f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -8.000000e+00f) * 2.500000e-01f));
  inverse[(14)] = (inverse[(14)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -8.000000e+00f) * 4.000000e+00f));
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6221824))]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6422528))]);
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6623232))] * 2.500000e-01f));
  inverse[(14)] = (inverse[(14)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6823936))] * 4.000000e+00f));
  inverse[(15)] = 0.000000e+00f;
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1404928))] * -1.000000e+00f) * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1605632))] * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1806336))] * -1.000000e+00f) * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2007040))] * -1.000000e+00f) * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2207744))] * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2609152))] * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2809856))]);
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3010560))] * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3211264))] * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3411968))]);
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3813376))] * 1.250000e-01f) * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4014080))] * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4214784))] * 1.250000e-01f) * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4415488))] * 1.250000e-01f) * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4616192))] * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5017600))] * -8.000000e+00f) * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5218304))] * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5419008))] * -8.000000e+00f) * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + ((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5619712))] * -8.000000e+00f) * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5820416))] * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6221824))] * -1.000000e+00f));
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6422528))]);
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6623232))] * 1.250000e-01f));
  inverse[(15)] = (inverse[(15)] + (bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6823936))] * -8.000000e+00f));
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 7024640))]);
  for (int ax2_inner = 0; ax2_inner < 4; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      T_relu[((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 56) * 896) + (ax2_inner * 224)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 56) * 4)) + ax3_inner))] = max((inverse[(((ax2_inner * 4) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 3136))]), 0.000000e+00f);
    }
  }
}

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_12_kernel0(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ T_relu) {
  float compute[16];
  __shared__ float pad_temp_shared[360];
  __shared__ float placeholder_shared[576];
  for (int yy_init = 0; yy_init < 2; ++yy_init) {
    compute[(yy_init)] = 0.000000e+00f;
    compute[((yy_init + 4))] = 0.000000e+00f;
    compute[((yy_init + 8))] = 0.000000e+00f;
    compute[((yy_init + 12))] = 0.000000e+00f;
    compute[((yy_init + 2))] = 0.000000e+00f;
    compute[((yy_init + 6))] = 0.000000e+00f;
    compute[((yy_init + 10))] = 0.000000e+00f;
    compute[((yy_init + 14))] = 0.000000e+00f;
  }
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if ((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 360) {
        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 45) {
          pad_temp_shared[((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((((1 <= ((((int)blockIdx.y) * 4) + (((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 180) / 30))) && (((((int)blockIdx.y) * 4) + (((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 180) / 30)) < 225)) && (1 <= ((((int)blockIdx.x) * 28) + ((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)))) && (((((int)blockIdx.x) * 28) + ((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)) < 225)) ? placeholder[((((((((rc_outer * 100352) + (((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 180) * 50176)) + (((int)blockIdx.y) * 896)) + ((((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 180) / 30) * 224)) + (((int)blockIdx.x) * 28)) + ((((((int)threadIdx.z) * 45) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 30)) - 225))] : 0.000000e+00f);
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) / 6)) < 32) {
        if (((((int)threadIdx.z) * 8) + (((int)threadIdx.x) / 3)) < 64) {
          if (((((int)threadIdx.z) * 24) + ((int)threadIdx.x)) < 192) {
            if ((((((int)threadIdx.z) * 72) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 576) {
              if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 72) {
                placeholder_shared[((((((int)threadIdx.z) * 72) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[((((((((int)threadIdx.z) * 2304) + ((((int)threadIdx.x) / 6) * 576)) + (rc_outer * 18)) + ((((int)threadIdx.x) % 6) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 2; ++rc_inner) {
      for (int ry_inner = 0; ry_inner < 3; ++ry_inner) {
        for (int rx_inner = 0; rx_inner < 3; ++rx_inner) {
          for (int yy = 0; yy < 2; ++yy) {
            compute[(yy)] = (compute[(yy)] + (pad_temp_shared[((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner))] * placeholder_shared[(((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner))]));
            compute[((yy + 4))] = (compute[((yy + 4))] + (pad_temp_shared[((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 144))]));
            compute[((yy + 8))] = (compute[((yy + 8))] + (pad_temp_shared[((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 288))]));
            compute[((yy + 12))] = (compute[((yy + 12))] + (pad_temp_shared[((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 432))]));
            compute[((yy + 2))] = (compute[((yy + 2))] + (pad_temp_shared[(((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner) + 60))] * placeholder_shared[(((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner))]));
            compute[((yy + 6))] = (compute[((yy + 6))] + (pad_temp_shared[(((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner) + 60))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 144))]));
            compute[((yy + 10))] = (compute[((yy + 10))] + (pad_temp_shared[(((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner) + 60))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 288))]));
            compute[((yy + 14))] = (compute[((yy + 14))] + (pad_temp_shared[(((((((rc_inner * 180) + (yy * 30)) + (ry_inner * 30)) + ((int)threadIdx.x)) + rx_inner) + 60))] * placeholder_shared[((((((((int)threadIdx.z) * 18) + (rc_inner * 9)) + (ry_inner * 3)) + rx_inner) + 432))]));
          }
        }
      }
    }
  }
  for (int ax2_inner_inner_inner = 0; ax2_inner_inner_inner < 2; ++ax2_inner_inner_inner) {
    T_relu[((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)))] = max((compute[(ax2_inner_inner_inner)] + placeholder2[(((int)threadIdx.z))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 401408))] = max((compute[((ax2_inner_inner_inner + 4))] + placeholder2[((((int)threadIdx.z) + 8))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 802816))] = max((compute[((ax2_inner_inner_inner + 8))] + placeholder2[((((int)threadIdx.z) + 16))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 1204224))] = max((compute[((ax2_inner_inner_inner + 12))] + placeholder2[((((int)threadIdx.z) + 24))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 448))] = max((compute[((ax2_inner_inner_inner + 2))] + placeholder2[(((int)threadIdx.z))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 401856))] = max((compute[((ax2_inner_inner_inner + 6))] + placeholder2[((((int)threadIdx.z) + 8))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 803264))] = max((compute[((ax2_inner_inner_inner + 10))] + placeholder2[((((int)threadIdx.z) + 16))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 896)) + (ax2_inner_inner_inner * 224)) + (((int)blockIdx.x) * 28)) + ((int)threadIdx.x)) + 1204672))] = max((compute[((ax2_inner_inner_inner + 14))] + placeholder2[((((int)threadIdx.z) + 24))]), 0.000000e+00f);
  }
}

extern "C" __global__ void fused_nn_conv2d_add_4_kernel0(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ T_add) {
  float compute[6];
  __shared__ float pad_temp_shared[180];
  __shared__ float placeholder_shared[81];
  compute[(0)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(4)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  compute[(5)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    if ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) < 180) {
      if (((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) < 60) {
        pad_temp_shared[((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = (((((1 <= ((((int)blockIdx.y) * 8) + ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) / 18))) && (((((int)blockIdx.y) * 8) + ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) / 18)) < 225)) && (1 <= ((((int)blockIdx.x) * 16) + ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) % 18)))) && (((((int)blockIdx.x) * 16) + ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) % 18)) < 225)) ? placeholder[(((((((rc_outer * 50176) + (((int)blockIdx.y) * 1792)) + (((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) / 18) * 224)) + (((int)blockIdx.x) * 16)) + ((((((int)threadIdx.z) * 60) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) % 18)) - 225))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) / 9)) < 9) {
      if (((((int)threadIdx.z) * 9) + (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) / 3)) < 27) {
        if ((((((int)threadIdx.z) * 27) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) < 81) {
          if (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) < 27) {
            if (((int)threadIdx.x) < 4) {
              placeholder_shared[((((((int)threadIdx.z) * 27) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)))] = placeholder1[(((((((int)threadIdx.z) * 864) + ((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) / 9) * 288)) + (rc_outer * 9)) + (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) % 9)))];
            }
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = (compute[(0)] + (pad_temp_shared[(((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)))] * placeholder_shared[((((int)threadIdx.z) * 9))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[(((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 27))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[(((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 54))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[((((int)threadIdx.z) * 9))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 27))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 54))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 1))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 28))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 1))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 55))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 1))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 28))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 55))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 2))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 29))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 2))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 56))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 3))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 2))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 3))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 29))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 3))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 56))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 18))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 3))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 18))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 30))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 18))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 57))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 3))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 30))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 57))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 4))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 31))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 19))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 58))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 4))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 31))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 58))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 5))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 32))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 20))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 59))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 21))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 5))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 21))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 32))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 21))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 59))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 36))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 6))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 36))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 33))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 36))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 60))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 6))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 33))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 60))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 7))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 34))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 37))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 61))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 7))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 34))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 61))]));
    compute[(0)] = (compute[(0)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 8))]));
    compute[(2)] = (compute[(2)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 35))]));
    compute[(4)] = (compute[(4)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 38))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 62))]));
    compute[(1)] = (compute[(1)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 39))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 8))]));
    compute[(3)] = (compute[(3)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 39))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 35))]));
    compute[(5)] = (compute[(5)] + (pad_temp_shared[((((((int)threadIdx.y) * 18) + (((int)threadIdx.x) * 2)) + 39))] * placeholder_shared[(((((int)threadIdx.z) * 9) + 62))]));
  }
  T_add[((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)))] = (compute[(0)] + placeholder2[(((int)threadIdx.z))]);
  T_add[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + 150528))] = (compute[(2)] + placeholder2[((((int)threadIdx.z) + 3))]);
  T_add[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + 301056))] = (compute[(4)] + placeholder2[((((int)threadIdx.z) + 6))]);
  T_add[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + 1))] = (compute[(1)] + placeholder2[(((int)threadIdx.z))]);
  T_add[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + 150529))] = (compute[(3)] + placeholder2[((((int)threadIdx.z) + 3))]);
  T_add[(((((((((int)threadIdx.z) * 50176) + (((int)blockIdx.y) * 1792)) + (((int)threadIdx.y) * 224)) + (((int)blockIdx.x) * 16)) + (((int)threadIdx.x) * 2)) + 301057))] = (compute[(5)] + placeholder2[((((int)threadIdx.z) + 6))]);
}

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_13_kernel0(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ T_relu) {
  float compute[32];
  __shared__ float pad_temp_shared[32];
  __shared__ float placeholder_shared[64];
  #pragma unroll
  for (int ff_init = 0; ff_init < 2; ++ff_init) {
    compute[(ff_init)] = 0.000000e+00f;
    compute[((ff_init + 4))] = 0.000000e+00f;
    compute[((ff_init + 8))] = 0.000000e+00f;
    compute[((ff_init + 12))] = 0.000000e+00f;
    compute[((ff_init + 16))] = 0.000000e+00f;
    compute[((ff_init + 20))] = 0.000000e+00f;
    compute[((ff_init + 24))] = 0.000000e+00f;
    compute[((ff_init + 28))] = 0.000000e+00f;
    compute[((ff_init + 2))] = 0.000000e+00f;
    compute[((ff_init + 6))] = 0.000000e+00f;
    compute[((ff_init + 10))] = 0.000000e+00f;
    compute[((ff_init + 14))] = 0.000000e+00f;
    compute[((ff_init + 18))] = 0.000000e+00f;
    compute[((ff_init + 22))] = 0.000000e+00f;
    compute[((ff_init + 26))] = 0.000000e+00f;
    compute[((ff_init + 30))] = 0.000000e+00f;
  }
  for (int ry_outer = 0; ry_outer < 5; ++ry_outer) {
    #pragma unroll
    for (int rx_outer = 0; rx_outer < 5; ++rx_outer) {
      __syncthreads();
      if (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) < 32) {
        if (((int)threadIdx.x) < 8) {
          pad_temp_shared[(((((int)threadIdx.z) * 8) + ((int)threadIdx.x)))] = (((((2 <= (((((int)blockIdx.y) * 2) + (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) >> 4)) + ry_outer)) && ((((((int)blockIdx.y) * 2) + (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) >> 4)) + ry_outer) < 226)) && (2 <= (((((int)blockIdx.x) * 16) + rx_outer) + (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) & 15)))) && ((((((int)blockIdx.x) * 16) + rx_outer) + (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) & 15)) < 226)) ? placeholder[((((((((((int)blockIdx.y) * 448) + ((((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) >> 4) * 224)) + (ry_outer * 224)) + (((int)blockIdx.x) * 16)) + rx_outer) + (((((int)threadIdx.z) * 8) + ((int)threadIdx.x)) & 15)) - 450))] : 0.000000e+00f);
        }
      }
      placeholder_shared[(((((int)threadIdx.z) * 16) + ((int)threadIdx.x)))] = placeholder1[(((((((int)threadIdx.z) * 400) + (((int)threadIdx.x) * 25)) + (ry_outer * 5)) + rx_outer))];
      __syncthreads();
      #pragma unroll
      for (int ff = 0; ff < 2; ++ff) {
        compute[(ff)] = (compute[(ff)] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[(((((int)threadIdx.z) * 2) + ff))]));
        compute[((ff + 4))] = (compute[((ff + 4))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 8))]));
        compute[((ff + 8))] = (compute[((ff + 8))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 16))]));
        compute[((ff + 12))] = (compute[((ff + 12))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 24))]));
        compute[((ff + 16))] = (compute[((ff + 16))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 32))]));
        compute[((ff + 20))] = (compute[((ff + 20))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 40))]));
        compute[((ff + 24))] = (compute[((ff + 24))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 48))]));
        compute[((ff + 28))] = (compute[((ff + 28))] + (pad_temp_shared[(((int)threadIdx.x))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 56))]));
        compute[((ff + 2))] = (compute[((ff + 2))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[(((((int)threadIdx.z) * 2) + ff))]));
        compute[((ff + 6))] = (compute[((ff + 6))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 8))]));
        compute[((ff + 10))] = (compute[((ff + 10))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 16))]));
        compute[((ff + 14))] = (compute[((ff + 14))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 24))]));
        compute[((ff + 18))] = (compute[((ff + 18))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 32))]));
        compute[((ff + 22))] = (compute[((ff + 22))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 40))]));
        compute[((ff + 26))] = (compute[((ff + 26))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 48))]));
        compute[((ff + 30))] = (compute[((ff + 30))] + (pad_temp_shared[((((int)threadIdx.x) + 16))] * placeholder_shared[((((((int)threadIdx.z) * 2) + ff) + 56))]));
      }
    }
  }
  #pragma unroll
  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 2; ++ax1_inner_inner_inner) {
    T_relu[((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)))] = max((compute[(ax1_inner_inner_inner)] + placeholder2[(((((int)threadIdx.z) * 2) + ax1_inner_inner_inner))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 401408))] = max((compute[((ax1_inner_inner_inner + 4))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 8))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 802816))] = max((compute[((ax1_inner_inner_inner + 8))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 16))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 1204224))] = max((compute[((ax1_inner_inner_inner + 12))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 24))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 1605632))] = max((compute[((ax1_inner_inner_inner + 16))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 32))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2007040))] = max((compute[((ax1_inner_inner_inner + 20))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 40))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2408448))] = max((compute[((ax1_inner_inner_inner + 24))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 48))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2809856))] = max((compute[((ax1_inner_inner_inner + 28))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 56))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 224))] = max((compute[((ax1_inner_inner_inner + 2))] + placeholder2[(((((int)threadIdx.z) * 2) + ax1_inner_inner_inner))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 401632))] = max((compute[((ax1_inner_inner_inner + 6))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 8))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 803040))] = max((compute[((ax1_inner_inner_inner + 10))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 16))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 1204448))] = max((compute[((ax1_inner_inner_inner + 14))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 24))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 1605856))] = max((compute[((ax1_inner_inner_inner + 18))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 32))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2007264))] = max((compute[((ax1_inner_inner_inner + 22))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 40))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2408672))] = max((compute[((ax1_inner_inner_inner + 26))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 48))]), 0.000000e+00f);
    T_relu[(((((((((int)threadIdx.z) * 100352) + (ax1_inner_inner_inner * 50176)) + (((int)blockIdx.y) * 448)) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x)) + 2810080))] = max((compute[((ax1_inner_inner_inner + 30))] + placeholder2[((((((int)threadIdx.z) * 2) + ax1_inner_inner_inner) + 56))]), 0.000000e+00f);
  }
}

